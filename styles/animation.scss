@property --counter-radius {
  syntax: "<integer>";
  initial-value: 1;
  inherits: false;
}

@property --counter-stroke {
  syntax: "<integer>";
  initial-value: 1;
  inherits: false;
}

:root {
  --loading-animate-total-duration: .7s;
}

.counter-radius-circle__setting {
  > circle {
    //transition: all 1s linear;
    cx: 50%;
    cy: 50%;
    stroke: black;
    stroke-width: var(--counter-stroke);
    r: var(--counter-result);

    animation: animation-ring var(--loading-animate-total-duration) linear;
    animation-play-state: paused;
    animation-fill-mode: forwards;
  }

  .ring-1 {
    --counter-offset: 0;
    --counter-stroke: 5;
    --counter-result: calc(var(--counter-radius) + 25 + var(--counter-stroke));
  }

  .ring-2 {
    --counter-stroke: 20;
    --counter-offset: 15;
    --counter-result: calc(var(--counter-radius) - 5 + var(--counter-stroke));
  }

  .ring-3 {
    --counter-result: var(--counter-radius);
  }

  &.counter__reserved-animate {
    --counter-radius: 2590;
    animation-iteration-count: revert;
  }

  &.start > circle {
    animation-play-state: running;
  }
}

@keyframes animation-ring {
  0% {
    --counter-radius: 3000;
  }

  95% {
    --counter-radius: 0;
    --counter-stroke: calc(5 + var(--counter-offset))
  }

  100% {
    --counter-stroke: 0;
  }
}

@keyframes loading-end {
  0% {
    r: 3000;
  }

  100% {
    r: 0;
  }
}

@keyframes scale-animation {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(.8);
    opacity: 0;
  }
}

@keyframes scale-animation-reverse {
  0% {
    transform: scale(1.05);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.counter-ending-animation {
  & > circle {
    cx: 50%;
    cy: 50%;

    animation: loading-end var(--loading-animate-total-duration) linear;
    animation-play-state: paused;
    animation-fill-mode: forwards;
  }

  &.start > circle {
    animation-play-state: running;
  }
}

.text-animation {
  animation: scale-animation .4s linear;
  animation-delay: .5s;
  animation-play-state: paused;
  animation-fill-mode: forwards;
  transform-origin: center;

  &.start {
    animation-play-state: running;
  }
}

.body-container-animation {
  transform: scale(1.05);
  opacity: 0;
  animation: scale-animation-reverse .1s linear forwards;
  animation-delay: .5s;
  animation-play-state: paused;
  transform-origin: 50vw 50vh;

  &.start {
    animation-play-state: running;
  }
}


.percent-rect__common {
  // 偏移量
  --rect-dynamic-percent: calc(790px * var(--loading-progress) / 100);

  --rect-width: 800px;
  --rect-height: 100px;
  --rect-stroke: 10px;
  --rect-offset: min(var(--rect-dynamic-percent), 790px);


  transition: .4s linear;
  //noinspection CssInvalidFunction
  clip-path: polygon(
      0 0,
      var(--rect-width) 0,
      var(--rect-width) var(--rect-height),
      0 var(--rect-height),
      calc(var(--rect-stroke) + var(--rect-offset)) calc(var(--rect-height) - var(--rect-stroke)), // 1
      calc(var(--rect-width) - var(--rect-stroke)) calc(var(--rect-height) - var(--rect-stroke)),
      calc(var(--rect-width) - var(--rect-stroke)) var(--rect-stroke),
        calc(var(--rect-stroke) + var(--rect-offset)) var(--rect-stroke), // 2
      calc(var(--rect-stroke) + var(--rect-offset)) calc(var(--rect-height) - var(--rect-stroke)),
      0 var(--rect-height)
  );
}
